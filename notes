For JNDI:
	Add dependencies:
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		providedRuntime 'javax.servlet:javax.servlet-api:3.1.0'
		implementation 'org.springframework.boot:spring-boot-actuator'
		
	Add this to properties:
		#Use this for JNDI
		spring.datasource.jndi-name=jdbc/jndiName
	
	Added resource ref to web.xml:
		<resource-ref>
			<res-ref-name>jdbc/springdb</res-ref-name>
			<res-type>javax.sql.DataSource</res-type>
			<res-auth>Container</res-auth>
			<res-sharing-scope>Shareable</res-sharing-scope>
		</resource-ref>
	
	Added config in Config Class:

Try for Eureka:
	- To disable bean scanning, create new empty beans.xml in WEB-INF. If beans.xml does not work, try bean.xml. Content in repo.
	- To disable Weld's automatic bean scanning for an entire deployment, add jboss-all.xml file as in the repo
	- After above steps, if exception like this occurs, javax.enterprise.inject.UnsatisfiedResolutionException: Unable to resolve a bean for 'javax.persistence.EntityManager', use below config
		public class CdiConfig {
			@Produces
			@Dependent
			@PersistenceUnit
			private EntityManagerFactory entityManagerFactory;

			@Produces
			@Dependent
			public EntityManager createEntityManager(EntityManagerFactory emf) {
				return emf.createEntityManager();
			}

			public void close(@Disposes EntityManager entityManager) {
				entityManager.close();
			}
		}
		
		OR
		
		public class CdiConfig {
			@Produces
			@Dependent
			@PersistenceContext
			private EntityManager entityManager;
		}
	
Setup different profiles for dev, prod, and test environments:
	- Create xml files name application-dev.properties, application-test.properties, application-staging.properties, and application-prod.properties in resources folder
	- In application.properties file, set spring.profiles.active=prod to set the active profile. By default always set the active profile to prod. For building in dev applications, set up eclipse configuration to run on dev profile.
	- For testing, in each test class, annotate it with @ActiveProfiles("dev")


Try adding this dependency: 
	// https://mvnrepository.com/artifact/com.sun.java/tools
	implementation 'com.sun.java:tools:11.0.1'

I fixed the issue by using latest version of jar and by setting below system property .
System.setProperty("db2.jcc.charsetDecoderEncoder", "3");
Also another way is disable unicode encoding for char and varchar type in DB2 SP which also worked for me ..

Issue occurs because of unmatching db2 jar and db2 version. Go to site:https://www.ibm.com/support/pages/db2-jdbc-driver-versions-and-downloads to find appropriate driver.

This is the maven repo for db2 drivers. https://mvnrepository.com/artifact/com.ibm.db2/jcc. Match your DB against the driver version from IBM site above and use appropriate version in gradle.

Go to this site for various drivers available on maven https://mvnrepository.com/artifact/com.ibm.db2

Gradle plugin to deploy directly to Websphere https://github.com/orctom/was-gradle-plugin

